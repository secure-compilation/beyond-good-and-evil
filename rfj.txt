================================================================================
| Syntax
================================================================================

What we call names hereafter are naturals. When compiling to a
realistic architecture, we will require them to be word-sized.

l - class name -- mapped to class declarations L (LT)
f - field index (natural)
m - method index (natural)
o - object names -- mapped to object declarations O (OT)

--------------------------------------------------------------------------------
| Programs
--------------------------------------------------------------------------------

A ::= (LT, OT)                   program

LT ::= partial map from l to L   class table
       with finite domain

OT ::= partial map from o to O   object table
       with finite domain

L ::=
  class {                        class definition
    l1, ..., ln;                   field declarations
    M1, ..., Mp                    method definitions
  }
  where n, p >= 0

O ::=
  obj l { o1, ..., on }          object definition
  where n >= 0

M ::=                            method declaration
  lr (la) {                        result and argument types
    e                              method body
  }

x ::=
  | this                         object on which the method was called
  | arg                          object the method was provided as argument

e ::=                            expressions
  | x                              variables
  | o                              object reference
  | e.f                            field selection
  | e.m(e)                         method call
  | e == e ? e : e                 object identity test

================================================================================
| Operational semantics
================================================================================

We introduce a big-step semantics which gives a high-level intuition,
together with a small-step semantics which relates well to low-level
evaluation. We relate the two.

--------------------------------------------------------------------------------
| Def.: Values
--------------------------------------------------------------------------------

A value is an object name o.

--------------------------------------------------------------------------------
| Prop.: Equality on values is decidable
--------------------------------------------------------------------------------
| forall o o', {o = o'} + {o <> o'}
--------------------------------------------------------------------------------

Proof: Object names are naturals.


Big-step semantics
==================

-------------------------- THIS
A; (ot, oa) |- this ==> ot


------------------------- ARG
A; (ot, oa) |- arg ==> oa


---------------------- OBJ
A; (ot, oa) |- o ==> o


A; (ot, oa) |- e ==> o
A = (OT, LT)
OT(o) = obj l { o1, ..., on }
OT(ot) = obj l { ... }               field privacy (granularity: class)
f = i in [1,n]
----------------------------- SEL
A; (ot, oa) |- e.f ==> oi


A; (ot, oa) |- e1 ==> ot'
A; (ot, oa) |- e2 ==> oa'
A = (OT, LT)
OT(ot') = obj l { o1, ..., on }
LT(l) = class { ... ; M1, ..., Mp }
Mj = lr (la) { e }
m = j in [1,p]
A; (ot', oa') |- e ==> o
----------------------------------- CALL
A; (ot, oa) |- e1.m(e2) ==> o


e1 ==> o12
e2 ==> o12
e3 ==> o3
---------------------------------------- TESTEQ
A; (ot, oa) |- e1 == e2 ? e3 : e4 ==> o3


e1 ==> o1
e2 ==> o2
o1 <> o2
e4 ==> o4
---------------------------------------- TESTNEQ
A; (ot, oa) |- e1 == e2 ? e3 : e4 --> o4


Small-step semantics
====================

E ::=                            flat evaluation contexts
  | [].f
  | [].m(e)
  | o.m([])
  | [] == e2 ? e3 : e4
  | o1 == [] ? e3 : e4

K ::= []                         continuations (lists of flat eval contexts)
  | E :: K

CS ::= []                        call stack
  | (ot, oa, K) :: CS

Cfg ::=                          reduction configurations
  | (CS, ot, oa, K, e)


-------------------------------------------------- THIS
A |- (CS, ot, oa, K, this) --> (CS, ot, oa, K, ot)


------------------------------------------------- ARG
A |- (CS, ot, oa, K, arg) --> (CS, ot, oa, K, oa)


-------------------------------------------------------- SEL_PUSH
A |- (CS, ot, oa, K, e.f) --> (CS, ot, oa, [].f :: K, e)


A = (OT, LT)
OT(o) = obj l { o1, ..., on }
OT(ot) = obj l { ... }               field privacy (granularity: class)
f = i in [1,n]
------------------------------------------------------- SEL_POP
A |- (CS, ot, oa, [].f :: K, o) --> (CS, ot, oa, K, oi)


------------------------------------------------------------------ CALL_PUSH1
A |- (CS, ot, oa, K, e1.m(e2)) --> (CS, ot, oa, [].m(e2) :: K, e1)


------------------------------------------------------------------------ CALL_PUSH2
A |- (CS, ot, oa, [].m(e2) :: K, o1) --> (CS, ot, oa, o1.m([]) :: K, e2)

A = (OT, LT)
OT(ot') = obj l { o1, ..., on }
LT(l) = class { ... ; M1, ..., Mp }
Mj = lr (la) { e }
m = j in [1,p]
----------------------------------------------------------- CALL_DO
A |- (               CS, ot,  oa,  ot'.m([]) :: K, oa') -->
     ((ot, oa, K) :: CS, ot', oa',              K, e)


---------------------------------------------------------------- RETURN
A |- ((ot', oa', K) :: CS, _, _, [], o) --> (CS, ot', oa', K, o)


------------------------------------------------------------------ TEST_PUSH1
A |- (CS, ot, oa,                       K, e1 == e2 ? e3 : e4) -->
     (CS, ot, oa, [] == e2 ? e3 : e4 :: K, e1)


-------------------------------------------------- TEST_PUSH2
A |- (CS, ot, oa, [] == e2 ? e3 : e4 :: K, o1) -->
     (CS, ot, oa, o1 == [] ? e3 : e4 :: K, e2)


------------------------------------------------ TEST_POP_EQ
A |- (CS, ot, oa, o == [] ? e3 : e4 :: K, o) -->
     (CS, ot, oa,                      K, e3)

o <> o'
------------------------------------------------- TEST_POP_NEQ
A |- (CS, ot, oa, o == [] ? e3 : e4 :: K, o') -->
     (CS, ot, oa, K,                      e4)


Notations for reductions between configurations
===============================================

For every program A, we define three relations -->_A, -/->_A and
-->*_A between configurations as follows:

Cfg -->_A Cfg' ::= A |- Cfg --> Cfg'

Cfg -/->_A Cfg' ::= ~ (Cfg -->_A Cfg')
                    i.e. (Cfg -->_A Cfg') -> _|_

-->*_A ::= reflexive and transitive closure of -->_A


Properties
==========

--------------------------------------------------------------------------------
| Prop.: Relation between big-step and small-step semantics (hopefully)
--------------------------------------------------------------------------------
| forall A ot oa e o,
|   A; (ot, oa) |- e ==> o
|     <->
|   ([], ot, oa, [], e) -->*_A ([], ot, oa, [], o)
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
| Prop.: Values do not reduce
--------------------------------------------------------------------------------
| forall o A ot oa Cfg',
|   ([], ot, oa, [], o) -/->_A Cfg'
--------------------------------------------------------------------------------

Proof: No rule applies with such a configuration in the left-hand side.

--------------------------------------------------------------------------------
| Prop.: Reduction is deterministic
--------------------------------------------------------------------------------
| forall Cfg Cfg' Cfg'',
|    Cfg --> Cfg'  ->
|    Cfg --> Cfg'' ->
|      Cfg' = Cfg''
--------------------------------------------------------------------------------

Proof: We show that at most one rule applies with Cfg as the left-hand
side. Let (_, _, _, K, e) = Cfg. By case on e:
* if e is not an o:
    at most one rule applies depending on e (syntax-directed):
      this -> THIS, arg -> ARG, e.f -> SEL_PUSH,
      e.m(e') -> CALL_PUSH1, e1 == e2 ? e3 : e4 -> TEST_PUSH1;
* if e is an o:
  * if K is empty, only RETURN may apply;
  * otherwise, by case on the head E of K:
    * if E is o == [] ? e3 : e4, then at most one rule applies, chosen
      between TEST_POP_EQ and TEST_POP_NEQ which are mutually
      exclusive;
    * otherwise, at most one rule applies depending on E
      (syntax-directed):
        [].f -> SEL_POP, [].m(e) -> CALL_PUSH2,
        o.m([]) -> CALL_DO, [] == e2 ? e3 : e4 -> TEST_PUSH2.


Semantics of programs
=====================

--------------------------------------------------------------------------------
| Def.: Reduction of programs
--------------------------------------------------------------------------------

We define a reduction relation between programs and values as follows:

  A = (LT, OT)
  LT(0) = class { ...; 0 (0) { e } }
  OT(0) = obj 0 { ... }
  A; (0, 0) |- e ==> v
  ----------------------------------
  |- A ==> v

Note: We define later evaluable programs, which can be seen as
  particular well-typed programs which trivially satisfy the two
  extra conditions we ask for, that is:
    LT(0) = class { ...; 0 (0) { e } }
    OT(0) = obj 0 { ... }.


================================================================================
| Type system
================================================================================

--------------------------------------------------------------------------------
| Partial programs
--------------------------------------------------------------------------------

P ::= (                           partial program
  I,                                imported declarations
  A,                                definitions (syntactically like a
                                    program defined above)
  E                                 exported declarations
)

I ::= D

E ::= D

D ::= (LD, OD)

LD ::= partial map from l to LL  class declaration table

OD ::= partial map from o to OO  object declaration table

LL ::=
  class decl {                    class declaration
    N1, ..., Np                     method signatures
  }
  where p >= 0

OO ::=
  obj decl l                      object declaration

N ::=
  lr (la)

--------------------------------------------------------------------------------
| Def.: Partial-program typing
--------------------------------------------------------------------------------

P = (I, A, E)
I |- A : E
-------------
|- P ok

|- I ok
I |- A ok
I |- E ok
A |- E ok
------------
I |- A : E

Well-formedness of import declarations
======================================

Import declarations should provide declarations for every class that
is mentionned in a method signature or in an object declaration.

I = D
D = (LD, OD)
forall l in dom(LD),
  let class decl { N1, ..., Np } = LD(l) in
  forall i in [1,p],
    let lr (la) = Ni in
    lr in dom(LD) /\ la in dom(LD)
forall o in dom(OD),
  let obj decl l = OD(o) in
  l in dom(LD)
-------------------------------------------
|- I ok


Well-formedness of export declarations
======================================

Export declarations should provide declarations for every class that
is mentionned in a method signature or in an object declaration,
except when such a declaration is already part of the import
declarations. They should not redefine imported declarations; as such,
their domains should be disjoint with the ones of import declarations.

I = D
D = (LD, OD)
E = D'
D' = (LD', OD')
dom(LD) inter dom(LD') = empty_set
dom(OD) inter dom(OD') = empty_set
forall l in dom(LD'),
  let class decl { N1, ..., Np } = LD'(l) in
  forall i in [1,p],
    let lr (la) = Ni in
    (lr in dom(LD) \/ lr in dom(LD')) /\
      (la in dom(LD) \/ la in dom(LD'))
forall o in dom(OD'),
  let obj decl l = OD'(o) in
  l in dom(LD) \/ l in dom(LD')
--------------------------------------------
I |- E ok


Export declarations should be correctly implemented by the actual
program, that is, every exported declaration should have a
corresponding definition, and the types in every exported method
signature or object declaration should match with the actual type in
the corresponding definition.

E = D
D = (LD, OD)
A = (LT, OT)
dom(LD) included in dom(LT)
dom(OD) included in dom(OT)
forall l in dom(LD),
  let class decl { N1, ..., Np } = LD(l) in
  let class { ... ; M1, ..., Mp' } = LT(l) in
  p = p' /\
    forall i in [1,p],
    let lr (la) = Ni in
    let lr' (la') { _ } = Mi in
    lr = lr' /\ la = la'
forall o in dom(OD),
  let obj decl l = OD(o) in
  let obj l' { ... } = OT(o) in
  l = l'
---------------------------------------------
A |- E ok


Well-formedness and -typing of programs
=======================================

Except when the corresponding class or object already has an import
declaration, programs should provide definitions for every class
mentionned in a field declaration, in a method definition or in an
object definition, and for every object mentionned in a method body or
in an object definition. They should not redefine imported
declarations; as such, their domains should be disjoint with the ones
of import declarations.

In the case of object definition, objects can only be defined for
classes defined in the program -- not for imported classes.

We require moreover that every method body should be well-typed with
respect to the corresponding method return and argument types.

I = D
D = (LD, OD)
A = (LT, OT)
dom(LD) inter dom(LT) = empty_set
dom(OD) inter dom(OT) = empty_set
forall l in dom(LT),
  D; A |- LT(l) @ l ok
forall o in dom(OT),
  D; A |- OT(o) ok
---------------------------------
I |- A ok


Object definition typing
------------------------

D = (_, OD)
A = (LT, OT)
LT(l) = class { l1, ..., ln; ... }            can only define objects of classes
forall i in [1,n],                                           in the same program
  OD(oi) = obj decl li \/
    OT(oi) = obj li { ... }
----------------------------------
D; A |- obj l { o1, ..., on } ok


Class definition typing
-----------------------

D = (LD, _)
A = (LT, _)
forall i in [1,n],
  li in dom(LD) \/ li in dom(LT)
forall j in [1,p],
  D; A |- Mj @ lt ok
--------------------------------------------------
D; A |- class { l1, ..., ln; M1, ..., Mp } @ lt ok


Method typing
-------------

G = {this:lt, arg:la}
D; A; G |- e : lr
-----------------------------
D; A |- lr (la) { e } @ lt ok


Expression typing
-----------------

We define typing environments as:

                           G ::= {this:lt, arg:la}

------------------- TVAR
D; A; G |- x : G(x)


A = (_, OT)
OT(o) = obj l { ... }
--------------------- TOBJ
D; A; G |- o : l


D = (_, OD)
OD(o) = obj decl l
------------------ TOBJ'
D; A; G |- o : l


D; A; G |- e : l
G(this) = l                                   ensures field privacy
A = (LT, _)
LT(l) = class { l1, ..., ln; ... }
f in [1,n]
---------------------------------- TSEL
D; A; G |- e.f : lf


D; A; G |- e : l
A = (LT, _)
LT(l) = class { ...; M1, ..., Mp }
m in [1,p]
Mm = lr (la) { _ }
D; A; G |- ea : la
---------------------------------- TCALL
D; A; G |- e.m(ea) : lr


D; A; G |- e : l
D = (LD, _)
LD(l) = class decl { N1, ..., Np }
m in [1,p]
Sm = lr (la)
D; A; G |- ea : la
---------------------------------- TCALL'
D; A; G |- e.m(ea) : lr


D; A; G |- e1 : l'
D; A; G |- e2 : l'
D; A; G |- e3 : l
D; A; G |- e4 : l
----------------------------------- TTEST
D; A; G |- (e1 == e2 ? e3 : e4) : l


--------------------------------------------------------------------------------
| Def.: Complete programs
--------------------------------------------------------------------------------

A program A is complete if it typechecks with no import and export
declarations.

  (empty_map, empty_map) |- A : (empty_map, empty_map)
  ----------------------------------------------------
  |- A complete


--------------------------------------------------------------------------------
| Def.: Evaluable programs
--------------------------------------------------------------------------------

A program A is evaluable if typechecks with no import declarations
and a particular choice of export declarations, MainSig, which
correspond to the way program evaluation is performed.

  MainSig ::= (LE, OE)
    where LE = (0 => class decl { 0 (0) })
          OE = (0 => obj decl 0)

  (empty_map, empty_map) |- A : MainSig
  -------------------------------------
  |- A evaluable


--------------------------------------------------------------------------------
| Def: Complete and evaluable partial programs
--------------------------------------------------------------------------------

We say that a well-typed partial program (I, A, E) is complete when
  I = (empty_map, empty_map).

We say that it is evaluable when moreover
  LE(0) = class decl { 0 (0) }
and
  OE(0) = obj decl 0.

Note:
  (I, A, E) complete ->  |- A complete.
  (I, A, E) evaluable ->  |- A evaluable.

  However, it is possible for A to be complete (resp. evaluable)
  without having (I, A, E) complete (resp. evaluable), for instance if
  the partial program has useless import declarations.


--------------------------------------------------------------------------------
| Def.: Linkability
--------------------------------------------------------------------------------

Two well-typed partial programs are linkable when their definitions
do not overlap, their common import declarations match, and the
export declarations of one which correspond to import declarations of
the other also match with the other's declarations.

  |- P ok
  |- Q ok
  P = (I, A, E)
  Q = (I', A', E')
  |- exclusive_defs A A'
  |- import_export_compatible I E'
  |- import_export_compatible I' E
  |- same_common_decls I I'
  --------------------------------
  |- linkable P Q

Note: we don't need a notion of compatibility between E and E' because
having  |- A : E ok  and  |- A' : E' ok  and  |- linkable A A'
already entails that E and E' have disjoint domains, which is what we
would require as a notion of linkability between E and E'.


  A = (LT, OT)
  A' = (LT', OT')
  dom(LT) inter dom(LT') = empty_set
  ----------------------------------
  |- exclusive_defs A A'

Note: we don't need to enforce that
  dom(OT) inter dom(OT') = empty_set
because it already entailed by condition
  dom(LT) inter dom(LT') = empty_set
since well-typed partial programs can only provide object definitions
for classes that they actually define.


  I = D
  D = (LI, OI)
  E = D'
  D' = (LE, OE)
  forall l in dom(LE) inter dom(LI),
    LE(l) = LI(l) /\
      forall o in dom(OI),
        OI(o) = obj decl l ->
          OE(o) = OI(o)
  dom(LT) inter dom(LT') = empty_set
  dom(OT) inter dom(OT') = empty_set
  ----------------------------------
  |- import_export_compatible I E


  I = D
  D = (LI, OI)
  I' = D'
  D' = (LI', OI')
  forall l in dom(LI) inter dom(LI'),
    LI(l) = LI'(l)
  forall o in dom(OI) inter dom(OI'),
    OI(o) = OI'(o)
  -----------------------------------
  |- same_common_decls I I'


--------------------------------------------------------------------------------
| Def.: Linking
--------------------------------------------------------------------------------

Two linkable (hence also well-typed) partial programs
  P = ((LI, OI), (LT, OT), (LE, OE))
  Q = ((LI', OI'), (LT', OT'), (LE', OE'))
can be linked to get a new partial program P /\/\ Q.

  P /\/\ Q ::= (
    ((LI - LE') union (LI' - LE), (OI - OE') union (OI' - OE)),
    (LT disjoint_union LT', OT disjoint_union OT'),
    (LE disjoint_union LE', OE disjoint_union OE')
  ) when |- linkable P Q

  where

    M - M' is defined
      * for any M and M' such that M(x) = M'(x)
        for all x in dom(M) inter dom(M')
      * as the partial map M restricted to
        domain dom(M) - dom(M')

    M union M' is defined (when applicable) as the partial map
      (M - M') disjoint_union M'

--------------------------------------------------------------------------------
| Th.: Linking preserves well-typing (composition lemma)
--------------------------------------------------------------------------------
| forall P Q, |- linkable P Q  ->  |- P /\/\ Q ok
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
| Prop.: Linking is symmetric
--------------------------------------------------------------------------------
| forall P Q, |- linkable P Q  ->
|             |- linkable Q P  ->
|             (Q /\/\ P = P /\/\ Q)
| forall P Q, |- linkable P Q  <->  |- linkable Q P
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
| Prop.: Linking is associative
--------------------------------------------------------------------------------
| forall P Q R, |- linkable P Q  ->  |- linkable (P /\/\ Q) R  ->
|               |- linkable Q R  ->  |- linkable P (Q /\/\ R) ->
|               (P /\/\ Q) /\/\ R = P /\/\ (Q /\/\ R)
| forall P Q R, (|- linkable P Q  /\  |- linkable (P /\/\ Q) R)
|                 <->
|               (|- linkable Q R  /\  |- linkable P (Q /\/\ R))
--------------------------------------------------------------------------------

================================================================================
| Encodings
================================================================================

--------------------------------------------------------------------------------
| Tuples
--------------------------------------------------------------------------------

For each tuple type T=(l1, ..., ln)

class decl Unit {}

class Tuple_T {
  l1 f1, ..., ln fn;
  l1 get_1(Unit) { this.f1 },
  ...
  ln get_n(Unit) { this.fn },
}

--------------------------------------------------------------------------------
| Booleans
--------------------------------------------------------------------------------

class Bool {}

obj true : Bool {}
obj false : Bool {}

If then else via identity test, e.g. (b == true ? e1 : e2).


================================================================================
| Properties of our type system
================================================================================

(To be proved)

--------------------------------------------------------------------------------
| Progress
--------------------------------------------------------------------------------
| forall e l I A G, I |- A ok ->
|                   I; A; G |- e : l ->
|                     is_value e \/ exists e', e -->_A e'
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
| Preservation (Subject reduction)
--------------------------------------------------------------------------------
| forall e e' l I A G, I |- A ok ->
|                      I; A; G |- e : l ->
|                      e -->_A e' ->
|                      P; G |- e' : l
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
| Type safety
--------------------------------------------------------------------------------
| forall e l I A G, I |- A ok ->
|                   I; A; G |- e : l ->
|                     is_value e \/
|                       (exists e', e -->_A e' /\ I; A; G |- e' : l)
--------------------------------------------------------------------------------


================================================================================
| Observational equivalence
================================================================================

To keep our stronger than full abstraction corruption property simple
we stick to programs that correspond to low-level components, or to
sets of low-level components. However, to allow interaction with the
context, our notion of high-level programs will be well-typed
*partial* programs, which may include import declarations that will be
mapped to context definitions.

--------------------------------------------------------------------------------
| Def.: High-level program
--------------------------------------------------------------------------------

A high-level program is a well-typed partial program.

--------------------------------------------------------------------------------
| Def.: High-level context
--------------------------------------------------------------------------------

A high-level context C is a well-typed partial program. A program can
only be inserted in a linkable context. Inserting a program P in a
context C is linking, it yields a new high-level program:

     C[P] ::= P /\/\ C       when |- linkable C P

--------------------------------------------------------------------------------
| Def.: Closing contexts
--------------------------------------------------------------------------------

Given a program P and a context C, we say that C closes P when C is
linkable with P and inserting P in C gives an evaluable partial
program, that is:

   |- linkable C P
   |- C[P] evaluable
   -----------------
   |- closes C P

We define the set of closing contexts of a program P by:

  closing_contexts P ::= {C | |- closes C P}

--------------------------------------------------------------------------------
| Def.: Interface equivalence
--------------------------------------------------------------------------------

We say that two programs P and Q are interface equivalent when they
share the same import and export definitions.

  same_interface (I, A, E) (I', A', E') ::= (I = I') /\ E = E'

--------------------------------------------------------------------------------
| Prop.: Characterization of interface equivalence for well-typed programs
--------------------------------------------------------------------------------
| forall P Q,  |- P ok  ->  |- Q ok  ->
|     same_interface P Q <-> (closing_contexts P = closing_contexts Q)
--------------------------------------------------------------------------------

Proof: todo.

--------------------------------------------------------------------------------
| Def.: Observational equivalence
--------------------------------------------------------------------------------

Two well-typed programs P and Q are observationnally equivalent if
they are interface equivalent and, for any context C that closes them,
when separately placing the two in C, the two resulting programs
behave the same with respect to termination. That is:


  |- P ok
  |- Q ok
  same_interface P Q
  forall C in closing_contexts P,
    let (_, A, _) = C[P] in
    let (_, B, _) = C[Q] in
    terminates A <-> terminates B
  ---------------------------------------------------------
  |- P ~ Q

  where
   terminates A ::= exists o, |- A ==> o

================================================================================
| Intermediate machine
================================================================================

Here we present an abstract stack machine. The goal is to have an
intermediate language which offers a lower-level view, while still
being abstract (e.g. we allow unbounded stacks).

--------------------------------------------------------------------------------
| Informal overview
--------------------------------------------------------------------------------

A machine state is formed by:

* the currently running code;

* two registers, this and arg, that can only be changed by calls and
  returns, one holding a reference to the current object, the other
  holding a reference to the current argument;

* a call stack that allows storing the current environment (registers
  + continuation code) before performing a call, so that it can be
  restored afterwards;

* compartments, each corresponding to a high-level class, storing the
  code for its methods, all its instances, and a local
  stack used when executing a method of this compartment.

The running code can only use the local stack owned by the class of
the object that is currently referenced by register this. Upon call,
we may switch compartments, and thus local stacks.

This prevents low-level methods from compromising the local stack used by a
caller of a different compartment. An attacker compromising a given
class won't be able to damage an uncompromised caller's user stack
before control gets back to this caller.

--------------------------------------------------------------------------------
| Syntax
--------------------------------------------------------------------------------

At this level we have no names. Compartments are indexed, and objects
are indexed compartement-wise.

l ::= n                    compartment index (where n is natural)
o ::= n                    object index (where n is natural)
f ::= n                    field index (where n is natural)
m ::= n                    method index (where n is natural)

r ::= (l, o)               object reference

s ::= (                    machine state
  RF,                        a register file
  GS,                        a global call stack
  KT,                        compartments table
  code                       the currently running code
)

RF ::= (                   register file of immutable registers
  this => r,                 current instance
  arg => r                   current argument
)

GS ::= [] | (              call stack: to restore execution after a call
  RF,                        register file to be restored
  code                       code to be executed (will pop the result
                             value from the local stack)
) :: GS

KT ::= { K1, ..., Kk }     compartment table

  where k >= 0

K ::=                      compartment
| { M1, ..., Mp;             methods
    O1, ..., Oq;             instances
    LS }                     local stack
| _|_                      undefined compartment
                             (will be filled by linking)

  where O ::= (r1, ..., rn)  object
        p, q, n >= 0

M ::=                      method
  code

LS ::=                     local stack storing object references
  [] | r :: local_stack

code ::=                   code
  [] | instr :: code         list of instructions


Note: hereafter, "stack" always means "current local stack" when
describing an instruction, similarly "push" and "pop" always refer to
operations on the current local stack.


instr ::=                  instruction
  | Nop
  | This                     push reg[this]
  | Arg                      push reg[arg]
  | Ref r                    push constant reference r
  | Dup                      duplicate top value
  | Select f                 field selection
                               pop, then push the value of field f of
                               the popped object
  | Call m                   method call
                               pop twice, then call method m of the
                               second popped object, using the first
                               popped object as argument
  | Return                   return from call (with result)
                               pop, then resume execution to the
			       caller after pushing popped value to
			       its local stack
  | Beq n                    object identity test
                               pop twice, then skip n instructions
			       (forward jump) if the two references
			       refer to the same object

Note: At this level we make no distinction between inter- and intra-
compartment calls. If we were to need this distinction it would anyway
be lower level.

Note: Now we actually have two rules for inter and intra, but they
could be merged into one, following the intuition described
above. They look cleaner when separated (otherwise we would be popping
a value, then pushing it again to the very same stack, which looks a
bit silly; the rule would also be longer to state).

--------------------------------------------------------------------------------
| Def.: Reduction
--------------------------------------------------------------------------------

Macros:

  KT(l) ::= Kl when KT = { K1, ..., Kk }
                    1 <= l <= k

  (KT with l => K) ::= { K1, ..., Kl-1,
                         K,
                         Kl+1, ..., Kk }
                      when    KT = { K1, ..., Kk }
                              1 <= l <= k

  PointsToSomething(KT, r) ::=
    r = (l, o)
    KT(l) = { ...; O1, ..., Oq; ... }
    o <= q

TODO: Add sanity checks in the rules, which should hopefully be
*proved* useless e.g. because they are invariants. Having them around
when stating the rules looks good. Is this a good idea? Would it be
too strong to add everywhere the following premisse?

    PointsToSomething(KT, RF(this))
    PointsToSomething(KT, RF(arg))
    forall l in dom(KT),
      match KT(l) with
      | { ...; ...; LS} =>
            for every r in LS,
            PointsToSomething(KT, r)

Rules:

  ----------------------------------------------- NOP
  (RF, GS, KT, Nop :: code) -> (RF, GS, KT, code)

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; r :: LS }
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; r :: r :: LS }
  ------------------------------------------------------------- DUP
  (RF, GS, KT, Dup :: code) -> (RF, GS, KT', code)

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; LS }
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; r :: LS }
  -------------------------------------------------------- REF
  (RF, GS, KT, Ref r :: code) -> (RF, GS, KT', code)

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; LS }
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; RF(this) :: LS }
  --------------------------------------------------------------- THIS
  (RF, GS, KT, This :: code) -> (RF, GS, KT', code)

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; LS }
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; RF(arg) :: LS }
  -------------------------------------------------------------- ARG
  (RF, GS, KT, Arg :: code) -> (RF, GS, KT', code)

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; r :: LS }
  r = (l, o)          requiring l here ensures field privacy
  Oo = (r1, ..., rn)
  f <= n
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; rf :: LS }
  --------------------------------------------------------- SELECT
  (RF, GS, KT, Select f :: code) -> (RF, GS, KT', code)

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; ra :: rt :: LS }
  rt = (l', _)
  KT(l') = { M'1, ..., M'p'; ...; _ }
  m <= p'
  M'm = code'
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; LS }
  GS' = (RF, code) :: GS
  RF' = (this => rt, arg => ra)
  ------------------------------------------------------ CALL
  (RF, GS, KT, Call m :: code) -> (RF', GS', KT', code')

  GS = (RF', code') :: GS'
  RF(this) = (l, _)
  RF'(this) = (l', _)
  l <> l'
  KT(l) = { M1, ..., Mp; O1, ..., Oq; rr :: LS }
  KT(l') = { M'1, ..., M'p; O'1, ..., O'q; LS' }
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; LS }
                l' => { M'1, ..., M'p; O'1, ..., O'q; rr :: LS }
  -------------------------------------------------------------- RETURN-INTER
  (RF, GS, KT, Return :: code) -> (RF', GS', KT', code')

  GS = (RF', code') :: GS'
  RF(this) = (l, _)
  RF'(this) = (l, _)
  ------------------------------------------------------ RETURN-INTRA
  (RF, GS, KT, Return :: code) -> (RF', GS', KT, code')


  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; r :: r :: LS }
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; LS }
  code = i1 :: ... :: in :: code'
  --------------------------------------------------- BEQ-EQ
  (RF, GS, KT, Beq n :: code) -> (RF, GS, KT', code')

  RF(this) = (l, _)
  KT(l) = { M1, ..., Mp; O1, ..., Oq; r1 :: r2 :: LS }
  r1 <> r2
  KT' = KT with l => { M1, ..., Mp; O1, ..., Oq; LS }
  ---------------------------------------------------- BEQ-NEQ
  (RF, GS, KT, Beq n :: code) -> (RF, GS, KT', code)


--------------------------------------------------------------------------------
| Def.: Compilation
--------------------------------------------------------------------------------

When compiling, we want to linearize the finite partial maps CT, OT
into "arrays" (one fixed "array" of components, each having a fixed
"array" of objects). This is also possible for partial programs (D, A)
thanks to the declarations D: we know what the complete program will
look like.

Thus, we define:

  class_id(ST, l) = || { l' in dom(ST) | l' < l } ||
    when l in dom(ST)

  obj_id(ST, IT, o) = (
    class_id(ST, l),
    || { o' in dom(IT) | IT(o') = obj sig l /\ o' < o } ||
  )
    when IT(o) = obj sig l

Compilation of expressions
--------------------------

  Intuitive invariant, assuming a complete source program:

    When executed (from an appropriate machine state), the compiled
    expression (used as current code) will either terminate or loop.

    If it does not terminate, then neither does the source expression
    (in a matching environment).

    If it does terminate, however, then so does the source expression
    (in a matching environment). After the execution of the compiled
    expression, the current object is the same as before and exactly
    one new object reference has been pushed on the local stack. This
    reference is obj_id(o), where o is the unique object reference
    that the source expression reduces to.

  c_expr(ST, IT, this) = This

  c_expr(ST, IT, arg) = Arg

  c_expr(ST, IT, o) = Ref obj_id(ST, IT, o)

  c_expr(ST, IT, e.f) =
     c_expr(ST, IT, e);
     Select f

  c_expr(ST, IT, e.m(e')) =
     c_expr(ST, IT, e);
     c_expr(ST, IT, e');
     Call m

  c_expr(ST, IT, e1 == e2 ? e3 : e4) =
     c_expr(ST, IT, e1);
     c_expr(ST, IT, e2);
     Beq EQ;       (note: these are indeed relative forward jumps, so this works)
     c_expr(ST, IT, e4);
     Dup;          }  <--- a way to encode unconditional forward jump
     Beq END;      }
EQ:  c_expr(ST, IT, e3);
END: Nop

--------------------------------------------------------------------------------
| Def.: Compilation of (complete) programs (old)
--------------------------------------------------------------------------------

Compiling a complete program is quite straightforward once we know how
to compile expressions. We can get a list of classes out of KT by
skipping "holes" in the domain, and a list of objects for each class
by skipping "holes" in the domain and using one counter per class.


================================================================================
| Symbolic micro-policy (compartmentalization variant)
================================================================================

Many differences with respect to Oakland 2015 policy:
  - Simplifications:
    - static compartments, no way to split things
    - no jump and write targets
      (just a way for all compartments to call all monitor services)
  - Extensions:
    - prohibiting all intra-compartment reads
    - protected call stack in monitor space
    - monitor services for call, return, and select
  - Differences:
    - monitor services that return in a different compartment (call and return)

--------------------------------------------------------------------------------
| Symbolic tags
--------------------------------------------------------------------------------

Tm  ::= c | _|_         once we have allocation, _|_ would be unallocated space
Tr  ::= ()
Tpc ::= c            Q: do we need to switch to <F,c> where F in {Jal,NoJal}?
Ts  ::= ()

--------------------------------------------------------------------------------
| Symbolic rules
--------------------------------------------------------------------------------

Nop: {tpc=c, tci=c} -> {tpc'=c}

Const: {tpc=c, tci=c} -> {tpc'=c, trd'=()}

Mov: {tpc=c, tci=c, trs=(), trd=()} -> {tpc'=c, trd'=()}

Binop: {tpc=c, tci=c, tr1=(), tr2=()} -> {tpc'=c, trd'=()}

Load: {tpc=c, tci=c, trp=(), tm=c, trd=()} -> {tpc'=c, trd'=()}

Store: {tpc=c, tci=c, trp=(), trs=(), tm=c} -> {tpc'=c, tm'=c}

Jump: {tpc=c, tci=c, tr=()} -> {tpc'=c}

Jal: {tpc=c, tci=c, tr=(), tra=()} -> {tpc'=c, tra=()}

Bnz: {tpc=c, tci=c, tr=()} -> {tpc'=c}

Service: {tpc=c, tci=()} -> {}

--------------------------------------------------------------------------------
| Extra state
--------------------------------------------------------------------------------

call_stack : list (word, word, word)

lookup_method : obj -> nat -> option addr

lookup_field : obj -> nat -> option addr

--------------------------------------------------------------------------------
| Monitor services
--------------------------------------------------------------------------------

call(mem, reg, pc@c, (call_stack, lookup_method, lookup_field)) =
  let o = reg[r_arg1] in
  let arg = reg[r_arg2] in
  let m = reg[r_arg3] in
  ma <- lookup_method o m;
  if tag mem[reg[ra]] = c then
    let call_stack' = (reg[ra], reg[r_this], reg[r_arg]) :: call_stack in
    let reg' = (clear_registers reg)[r_this := o, r_arg := arg] in
    let c' = mem[ma] in
    Some (mem, reg', ma@c', (call_stack', lookup_method, lookup_field))
  else None

return(mem, reg, pc@c, (call_stack, lookup_method, lookup_field)) =
  match call_stack with
  | (ret, this, arg) :: call_stack' ->
    let reg' = (clear_registers reg)[r_ret := reg[r_ret],
                                     r_this := this, r_arg := arg] in
    let c' = mem[ret] in
    Some (mem, reg', ret@c', (call_stack', lookup_method, lookup_field))
  | [] -> None

  is this useful??
    |   if we remove it, then lookup_field shouldn't be extra state,
    |   we should have a fixed scheme instead
    v

select(mem, reg, pc@c, (call_stack, lookup_method, lookup_field)) =
  let o = reg[r_arg1] in
  let f = reg[r_arg2] in
  fa <- lookup_field o f;
  if tag mem[fa] = c then      <---- private fields
    let reg' = reg[r_ret := (val mem[fa])@()] in
    Some (mem, reg', ra@c, (call_stack, lookup_method, lookup_field))
  else
    None

Note: allowing returns to forged ra addresses seem ok because:
- for call we enforce that ra points to the caller's compartment
  - alternatively, we could store the caller's compartment on the call
    stack and restore it on return
- for select we preserve the same compartment id, so if the original
  value of ra was outside the compartment, the machine will stop on
  the next instruction fetch
- generally, our impression is that a return to an arbitrary place in
  the malicious component that invoked the service doesn't give the
  attacker additional power (the malicious component can already jump
  to any of its addresses); making this intuition formal in the full
  abstraction proof might be hard (or impossible if the intuition
  happens to be wrong), in which case we should require that monitor
  services are only reached via Jal


================================================================================
| Compilation scheme (old)
================================================================================

Define for each class:

  fieldoffset(l, f)
  methodoffset(l, m)

--------------------------------------------------------------------------------

Monitor services in the abstract machine:

* the idea: one stack per component ;
* two design choices:
    - a global stack handled by the monitor ;
    - or each stack located within the compartment of the component ;
* here: abstract machine, so we can manage them in the state for the moment.

/!\ need to forbid Jump-ing between compartements (e.g. for calling monitor services)
    --> only Jal
    (otherwise, we don't know who did the call, r_a may have been maliciously set by the attacker
     e.g. the stack of a component could be compromised by calling PUSH)

reg[r_arg1] = w
reg[r_a] = pc'
pc' in l_i
pc' - 1 in l_i                                   forbid jumps between distinct compartments
-----------------------------------------------------------------------------------------------
(mem, reg, push_addr, s_1, ..., s_i, ..., s_n) -> (mem, reg, pc', s_1, ..., w :: s_i, ..., s_n)

pc' in l_i
pc' - 1 in l_i                                   forbid jumps between distinct compartments
reg' = reg[r_ret <- w]
----------------------------------------------------------------------------------------------
(mem, reg, pop_addr, s_1, ..., w :: s_i, ..., s_n) -> (mem, reg', pc', s1, ..., s_i, ..., s_n)

mem[pc] = i
decode i = CALL rc rm ro rp
reg[rc] = c
reg[rm] = m
reg[ro] = o
reg[rp] = p

----------------------------
(mem, reg, pc, s) -> (mem, reg', pc', s)

mem[pc] = i
decode i = 
??
---------------
??

mem[pc] = i
decode[i] = Get ro rd
??
-----------------------
??

--------------------------------------------------------------------------------

Compilation of well-typed expressions:
  Variant #1: - doing everything via system calls
              - protection via compartmentalization micro-policy

Fix four distinct registers: r_this, r_arg, r_arg1, r_arg2, r_arg3, r_res (=r_ret), r_aux.

G = {this:lr, arg:la} when compiling a method body.
G = {} when compiling the main expression.

Properties of c_expr:
- invariant: r_arg and r_this are preserved
            (they can change internally, but are restored at the end)
- can overwrite all other registers
- writes result to r_res
- finishes with same stack as it was called (restores the original stack)

c_expr(this) = Mov r_this r_res
  (G(this) is defined in this case)

c_expr(arg) = Mov r_arg r_res
  (G(arg) is defined in this case)

c_expr(o) = Const o r_res

c_expr(e.f) =
    c_expr(e);
    Mov r_res r_arg1;
    Cons i_f r_arg2;
    Jal SELECT
  if G |- e : l (deterministic)
  and i_f = fieldoffset(l, f)

c_expr(e.m(e')) =
    c_expr(e);
    Jal PUSH r_res;
    c_expr(e');
    Pop r_arg1;
    Mov r_res r_arg2;
    Const i_m r_arg3;
    Push r_this;
    Push r_arg;
    Jal CALL
    Pop r_arg;
    Pop r_this
  if G |- e : l (deterministic)
  and i_m = methodoffset(l, m)

c_expr(e1 == e2 ? e3 : e4) =
    c_expr(e1);
    Push r_res;
    c_expr(e2);
    Pop r_aux;
    Binop_= r_aux r_res r_aux;
    Bnz r_aux LST;
    c_expr(e4);
    Jump END;
LST:c_expr(e3);
END:Nop

Q: How to represent the auxiliary stack of saved registers?
- globally, accessed via system calls
  - could be merged with global call stack:
    - stack frames between return addresses
    - Pop can't affect return addresses, only Return can
- locally, each compartment keeps its own stack
  - would work well with all alts below

--------------------------------------------------------------------------------

  Variant #2: - everything directly via instructions
                - monitor call only for index_to_addr (later object allocation)
              - fine-grained micro-policy
              - TODO: still unclear what to do with the stack(s)
                - alt1: keep using monitor service for call stack
                - alt2: protected call stack outside the monitor
                        (micro-policy for call-stack protection)
                - alt3: lightweight return addr protection + only local stacks

c_expr(e.f) =
    c_expr(e);
    Const a r_aux;
    Binop_+ r_res r_aux r_aux;
    Load r_aux r_res
  if G |- e : l (deterministic)
  and a = fieldoffset(l, f)

c_expr(e.m(e')) =
    c_expr(e);
    Push r_res;
    c_expr(e');
    Pop r_aux;
    Push r_this;
    Push r_arg;
    Mov r_aux r_this;
    Mov r_res r_arg;
    Const a r_aux;
    Jal r_aux;
    Pop r_arg;
    Pop r_this
  if G |- e : l (deterministic)
  and a = ClassAdressTable(l) + methodoffset(l, m)

c_expr(e1 == e2 ? e3 : e4) =
    c_expr(e1);
    Push r_res;
    c_expr(e2);
    Pop r_aux;
    Binop_- r_aux r_res r_aux;
    Bnz r_aux k;
    c_expr(e3);
    Const 1 r_aux;                        } ugly relative jump
    Bnz k' r_aux;                         } ^^^^^^^^^^^^^^^^^^
    c_expr(e4)
  if k = |c_expr(e3)| + 2
  and k' = |c_expr(e4)|
